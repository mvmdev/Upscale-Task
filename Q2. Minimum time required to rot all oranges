class Solution
{
    public static ArrayList<Integer> KDistanceNodes(Node root, int target , int k)
    {
        // return the sorted list of all nodes at k dist
        
        //Map to store the adjacency list
        HashMap<Integer,ArrayList<Integer>> hm=new HashMap<>();\
        //function to create the adjacency list
        adjlist(hm,root,-1);
        Queue<Integer> l=  bfs(hm,target,k);
        //final list to stoe the answer
        ArrayList<Integer> res=new ArrayList<>(l);
        Collections.sort(res);
        return res;
    }
    static void adjlist(HashMap<Integer,ArrayList<Integer>> hm,Node root,int parent)
    {
        
        if(root==null)
        {
            return ;
        }
        ArrayList<Integer> al=new ArrayList<>();
        if(parent!=-1)
        {al.add(parent);}
        if(root.left!=null)
        {
            al.add(root.left.data);
        }
        if(root.right!=null)
        {
            al.add(root.right.data);
        }
        hm.put(root.data,al);
        adjlist(hm,root.left,root.data);
        adjlist(hm,root.right,root.data);
        
        
    }
    static  Queue<Integer> bfs(HashMap<Integer,ArrayList<Integer>> hm,int target,int k)
    {
        Queue<Integer> q=new LinkedList<>();
        q.add(target);
        HashSet<Integer> vis=new HashSet<>();
        vis.add(target);
        while(q.isEmpty()==false)
        {
            if(k==0)
            {
                return q;
            }
            int s=q.size();
            for(int i=0;i<s;i++)
            {
                int current=q.poll();
                List<Integer> neighbor=hm.get(current);
                for(Integer n:neighbor)
                {
                    if(vis.contains(n)==false)
                    {
                        q.add(n);
                        vis.add(n);
                    }
                }
            }
            k--;
        }
        return q;
    }
}
